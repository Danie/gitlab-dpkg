#!/bin/sh

set -e

#
# Function: add_user
#
# Description: add gitlab user "git"
#
add_user() {
   # check if git user already exists and if not create it
   id -u git > /dev/null 2>&1 || {
      adduser --quiet --system --group --disabled-login \
      --home /var/lib/gitlab --shell /bin/sh --gecos 'GitLab User' git
   }
}

#
# Function: create_dirs
#
# Description: creates directory structure for gitlab
#
create_dirs() {
   # create gitlab home directory
   mkdir -p /var/lib/gitlab
   chown git:git /var/lib/gitlab

   # create gitlab satellites directory
   mkdir -p /var/lib/gitlab/gitlab-satellites
   chown git:git /var/lib/gitlab/gitlab-satellites

   # create gitlab uploads directory
   mkdir -p /var/lib/gitlab/uploads
   chown git:git /var/lib/gitlab/uploads

   # create gitlab cache directory
   mkdir -p /var/cache/gitlab
   chown git:git /var/cache/gitlab
   chmod 0750 /var/cache/gitlab

   # create gitlab pids directory
   mkdir -p /var/cache/gitlab/pids
   chown git:git /var/cache/gitlab/pids
   chmod 0750 /var/cache/gitlab/pids

   # create gitlab sockets directory
   mkdir -p /var/cache/gitlab/sockets
   chown git:git /var/cache/gitlab/sockets
   chmod 0750 /var/cache/gitlab/sockets

   # create gitlab log directory
   mkdir -p /var/log/gitlab
   chown git:git /var/log/gitlab
   chmod 0750 /var/log/gitlab

   # create gitlab run directory
   mkdir -p /var/run/gitlab
   chown git:git /var/run/gitlab
   chmod 0750 /var/run/gitlab

   # link python2.[6|7] to python2
   which python2 > /dev/null 2>&1 || {
      which python2.6 > /dev/null 2>&1 || {
         which python2.7 > /dev/null 2>&1 || {
            echo "python2.6 or python2.7 are not available."
            exit 1
         }
         ln -s /usr/bin/python2.7 /usr/bin/python2
         PYTHON27="true"
      }
      if [ -z $PYTHON27 ]
      then
         ln -s /usr/bin/python2.6 /usr/bin/python2
      fi
   }
}

#
# Function: create_dummy_git_repo
#
# Description: creates a dummy git repo to avoid obscure git warnings
#
create_dummy_git_repo() {
   cd /usr/share/gitlab
   git init
   git add VERSION
   git commit -m "dummy git repo"
}

#
# Function: gitlab_shell_install
#
# Description: creates gitlab-shell directory and initialize it
#
# Parameters: $FQDN
#
gitlab_shell_install() {
   # create gitlab-shell directory
   cp -a /usr/share/gitlab-shell /var/lib/gitlab
   chown -R git:git /var/lib/gitlab/gitlab-shell

   # edit gitlab-shell configuration
   sed -i "s/localhost/$1/" /etc/gitlab/gitlab-shell.yml

   # initialize gitlab-shell
   cd /var/lib/gitlab/gitlab-shell
   sudo -u git ./bin/install
}

#
# Function: gitlab_db_initialize
#
# Description: edit the db configuration and initialize the database
#
gitlab_db_initialize() {
   # determine needed database values
   DB_ADAPTER=$(dialog --radiolist "Choose Database-Adapter for GitLab" 0 0 0 "mysql" "MySQL-Database Adapter" on "postgresql" "PostgreSQL-Database Adapter" off 3>&1 1>&2 2>&3 3>&-)
   DB_SERVER=$(dialog --inputbox "Please enter the Database-Servername for GitLab." 0 0 "localhost" 3>&1 1>&2 2>&3 3>&-)
   DB_DATABASE=$(dialog --inputbox "Please enter the Database for GitLab." 0 0 "gitlab" 3>&1 1>&2 2>&3 3>&-)
   DB_USER=$(dialog --inputbox "Please enter the Database-User for GitLab." 0 0 "gitlab" 3>&1 1>&2 2>&3 3>&-)
   DB_PASS=$(dialog --inputbox "Please enter the Database-Password for GitLab." 0 0 "gitlab" 3>&1 1>&2 2>&3 3>&-)

   # show how to create database for gitlab
   if [ "$DB_ADAPTER" = "mysql" ]
   then
      dialog --msgbox "
      # Login to MySQL
      mysql -u root -p

      # Create a user for GitLab. (change gitlab to a real password)
      mysql> CREATE USER 'gitlab'@'localhost' IDENTIFIED BY 'gitlab';

      # Create the GitLab production database
      mysql> CREATE DATABASE IF NOT EXISTS gitlab DEFAULT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci';

      # Grant the GitLab user necessary permissopns on the table.
      mysql> GRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON gitlab.* TO 'gitlab'@'localhost';

      # Quit the database session
      mysql> \q

      # Try connecting to the new database with the new user
      mysql -u gitlab -p -D gitlab" 0 0
   else
      dialog --msgbox "
      # Login to PostgreSQL
      sudo -u postgres psql -d template1

      # Create a user for GitLab. (change gitlab to a real password)
      template1=# CREATE USER gitlab WITH PASSWORD 'gitlab';

      # Create the GitLab production database & grant all privileges on database
      template1=# CREATE DATABASE gitlab OWNER gitlab;

      # Quit the database session
      template1=# \q

      # Try connecting to the new database with the new user
      psql -d gitlab" 0 0
   fi

   # place values into databse configuration
   sed -i "s/host: localhost/host: $DB_SERVER/g" /etc/gitlab/database.yml.$DB_ADAPTER
   sed -i "s/database: gitlab/database: $DB_DATABASE/g" /etc/gitlab/database.yml.$DB_ADAPTER
   sed -i "s/username: gitlab/username: $DB_USER/g" /etc/gitlab/database.yml.$DB_ADAPTER
   sed -i "s/password: 'gitlab'/password: '$DB_PASS'/g" /etc/gitlab/database.yml.$DB_ADAPTER

   # link database configuration in gitlab base directory
   cd /usr/share/gitlab/config
   ln -f -s /etc/gitlab/database.yml.$DB_ADAPTER database.yml
}

#
# Function: gitlab_app_initialize
#
# Description: edit gitlab configuration and initialize the gitlab application
#
# Parameters: $FQDN
#
gitlab_app_initialize() {
   # place values into gitlab configuration
   sed -i "s/host: localhost/host: $1/" /etc/gitlab/gitlab.yml
   sed -i "s/email_from: gitlab@localhost/email_from: gitlab@$1/" /etc/gitlab/gitlab.yml
   sed -i "s/support_email: support@localhost/support_email: support@$1/" /etc/gitlab/gitlab.yml

   # initialize the gitlab application
   cd /usr/share/gitlab
   sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production
}

#
# Function: gitlab_git_global_settings
#
# Description: creates git global settings file for the gitlab user
#
# Parameters: $FQDN
#
gitlab_git_global_settings() {
   sudo -u git -H git config --global user.name "GitLab"
   sudo -u git -H git config --global user.email "gitlab@$1"
   sudo -u git -H git config --global core.autocrlf input
}

#
# Function: gitlab_gen_secret
#
# Description: generate the hex secret token and write it to gitlab folder
#
gitlab_gen_secret() {
   hexdump /dev/urandom | head | cut --bytes=10-60 | tr -d ' \n' | cut --bytes=-128 > /usr/share/gitlab/.secret
}

#
# Function: gitlab_backup
#
# Description: creates a backup of gitlab under /var/cache/gitlab/backups
#
gitlab_backup() {
   cd /usr/share/gitlab
   sudo -u git -H bundle exec rake gitlab:backup:create RAILS_ENV=production
}

#
# Function: gitlab_upgrade
#
# Description: all needed tasks to migrate from gitlab 6.1, 6.2 or 6.3
#
# Parameters: $FQDN
#
gitlab_upgrade() {
   # create dummy git repo
   if [ ! -d /usr/share/gitlab/.git ]; then
      create_dummy_git_repo
   fi

   # initialize global git settings
   if [ ! -f /var/lib/gitlab/.gitconfig ]; then
      gitlab_git_global_settings $FQDN
   fi

   # install new version of gitlab shell
   gitlab_shell_install $FQDN

   # running migration tasks for gitlab
   cd /usr/share/gitlab
   bundle exec rake db:migrate RAILS_ENV=production
   bundle exec rake assets:clean RAILS_ENV=production
   bundle exec rake assets:precompile RAILS_ENV=production
   bundle exec rake cache:clear RAILS_ENV=production

   # Set the permissions of the assets to git user
   chown -R git:git /var/cache/gitlab/cache
}

#
# Description: running configuration tasks
#
case "$1" in
   configure)
      # determine the FQDN of the gitlab server
      FQDN=$(dialog --inputbox "Please enter FQDN of GitLab-Server." 0 0 "$(hostname -f)" 3>&1 1>&2 2>&3 3>&-)

      if [ -z "$2" ]
      then
         # running install tasks
         add_user
         create_dirs
         create_dummy_git_repo
         gitlab_gen_secret
         gitlab_shell_install $FQDN
         gitlab_db_initialize
         gitlab_app_initialize $FQDN
         gitlab_git_global_settings $FQDN
      else
         # running backup
         gitlab_backup

         # running migration tasks
         gitlab_upgrade $FQDN
      fi
   ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
